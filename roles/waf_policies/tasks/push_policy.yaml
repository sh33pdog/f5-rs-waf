---
#pushes a given policy to a given bigip and creates a policy on the box.

################################################################################
#updates app specific features that we want to expose to the app owner 

- name: example copying file with owner and permissions
  copy:
    src: "{{role_path}}/files/waf_policies/{{waf_policy_name}}.xml"
    dest: "{{role_path}}/files/waf_policies/{{waf_policy_name}}-{{service_name}}.xml"

- name: Update WAF policy with app specific paramaters for login page
  xml:
    path: "{{role_path}}/files/waf_policies/{{waf_policy_name}}-{{service_name}}.xml"
    xpath: /policy/flows/flow_access/login_url
    set_children:
    - username_parameter: "username"
    - password_parameter: "password"
    - auth_type: "form"
    - response_doesnt_contain: "{{ response_doesnt_contain }}"

- name: Update WAF policy with app specific paramaters for login page
  xml:
    path: "{{role_path}}/files/waf_policies/{{waf_policy_name}}-{{service_name}}.xml"
    xpath: /policy/flows/flow_access/login_url
    attribute: url
    value: "/user/login"
    
- name: controls bruteforce setting
  xml:
    path: "{{role_path}}/files/waf_policies/{{waf_policy_name}}-{{service_name}}.xml"
    xpath: /policy/brute_force
    set_children:
    - flg_enabled: "false" 

################################################################################

#pushes the ASM policy to the bigip and creates an LTM policy that references it
- name: Import and activate ASM policy
  bigip_asm_policy:
    active: yes
    file: "{{ role_path }}/files/waf_policies/{{waf_policy_name}}.xml"
    name: "{{waf_policy_name}}"
    state: present
  delegate_to: localhost


- name: Create policy which is immediately published
  delegate_to: localhost
  bigip_policy:
    name: "{{ ltm_policy_name }}"
    partition: "{{ partition }}"
    state: present

- name: Add a rule to the new policy - default asm rule
  delegate_to: localhost
  bigip_policy_rule:
    actions:
      - type: enable
        asm_policy: "/{{ partition }}/{{ waf_policy_name }}"
    policy: "{{ ltm_policy_name }}"
    name: "default_asm_policy_rule"
   

   
   
#######################Getting bigip auth token #####################################
    
- name: Getting bigip authentication token
  delegate_to: localhost
  uri:
    body: '{"username":"{{vault_bigip_rest_user}}","password":"{{vault_bigip_rest_password}}","loginProvidername":"tmos"}'
    body_format: json
    method: POST
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/authn/login"
    status_code: 200
    validate_certs: no
  register: bigip_auth_response
  
- name: assinging auth token to a variable 
  set_fact:
    bigip_auth_token: "{{ bigip_auth_response.json.token.token }}"


#######################DOSL7 config#####################################
    

- name: create/update an whitelist address list 
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'dosl7_whitelist_address_list.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/shared-objects/address-list"
    validate_certs: no

- name: updating DOSL7 profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'dosl7_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: PATCH
    status_code: 200
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/dos/profile/{{dosl7_profile_name}}"
    validate_certs: no
    
- name: creating canary DOSL7 profile (when deploying canary)
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'dosl7_profile_payload_canary.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/dos/profile"
    validate_certs: no
  when: dosl7_profile_name_canary != "main_dosl7_policy"

- name: making sure it exists creating canary DOSL7 profile (when deploying canary)
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'dosl7_profile_payload_canary.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/dos/profile"
    validate_certs: no
  when: dosl7_profile_name_canary != "main_dosl7_policy"
 
#######################FPS config##################################### 

- name: updating FPS profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'fps_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: PATCH
    status_code: 200
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}//mgmt/tm/security/anti-fraud/profile/{{fps_profile_name}}"
    validate_certs: no
